// Code generated by mockery v2.20.0. DO NOT EDIT.

package kubernetes

import (
	mock "github.com/stretchr/testify/mock"
)

// MockBlueprintGetter is an autogenerated mock type for the blueprintGetter type
type MockBlueprintGetter struct {
	mock.Mock
}

type MockBlueprintGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlueprintGetter) EXPECT() *MockBlueprintGetter_Expecter {
	return &MockBlueprintGetter_Expecter{mock: &_m.Mock}
}

// Blueprints provides a mock function with given fields: namespace
func (_m *MockBlueprintGetter) Blueprints(namespace string) BlueprintInterface {
	ret := _m.Called(namespace)

	var r0 BlueprintInterface
	if rf, ok := ret.Get(0).(func(string) BlueprintInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(BlueprintInterface)
		}
	}

	return r0
}

// MockBlueprintGetter_Blueprints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Blueprints'
type MockBlueprintGetter_Blueprints_Call struct {
	*mock.Call
}

// Blueprints is a helper method to define mock.On call
//   - namespace string
func (_e *MockBlueprintGetter_Expecter) Blueprints(namespace interface{}) *MockBlueprintGetter_Blueprints_Call {
	return &MockBlueprintGetter_Blueprints_Call{Call: _e.mock.On("Blueprints", namespace)}
}

func (_c *MockBlueprintGetter_Blueprints_Call) Run(run func(namespace string)) *MockBlueprintGetter_Blueprints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockBlueprintGetter_Blueprints_Call) Return(_a0 BlueprintInterface) *MockBlueprintGetter_Blueprints_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlueprintGetter_Blueprints_Call) RunAndReturn(run func(string) BlueprintInterface) *MockBlueprintGetter_Blueprints_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockBlueprintGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockBlueprintGetter creates a new instance of MockBlueprintGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockBlueprintGetter(t mockConstructorTestingTNewMockBlueprintGetter) *MockBlueprintGetter {
	mock := &MockBlueprintGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
