// Code generated by mockery v2.53.3. DO NOT EDIT.

package debugmodecr

import (
	context "context"

	apiv1 "github.com/cloudogu/k8s-debug-mode-cr-lib/api/v1"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockDebugModeInterface is an autogenerated mock type for the DebugModeInterface type
type MockDebugModeInterface struct {
	mock.Mock
}

type MockDebugModeInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDebugModeInterface) EXPECT() *MockDebugModeInterface_Expecter {
	return &MockDebugModeInterface_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, name, opts
func (_m *MockDebugModeInterface) Get(ctx context.Context, name string, opts v1.GetOptions) (*apiv1.DebugMode, error) {
	ret := _m.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *apiv1.DebugMode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, v1.GetOptions) (*apiv1.DebugMode, error)); ok {
		return rf(ctx, name, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, v1.GetOptions) *apiv1.DebugMode); ok {
		r0 = rf(ctx, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiv1.DebugMode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, v1.GetOptions) error); ok {
		r1 = rf(ctx, name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDebugModeInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockDebugModeInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts v1.GetOptions
func (_e *MockDebugModeInterface_Expecter) Get(ctx interface{}, name interface{}, opts interface{}) *MockDebugModeInterface_Get_Call {
	return &MockDebugModeInterface_Get_Call{Call: _e.mock.On("Get", ctx, name, opts)}
}

func (_c *MockDebugModeInterface_Get_Call) Run(run func(ctx context.Context, name string, opts v1.GetOptions)) *MockDebugModeInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(v1.GetOptions))
	})
	return _c
}

func (_c *MockDebugModeInterface_Get_Call) Return(result *apiv1.DebugMode, err error) *MockDebugModeInterface_Get_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockDebugModeInterface_Get_Call) RunAndReturn(run func(context.Context, string, v1.GetOptions) (*apiv1.DebugMode, error)) *MockDebugModeInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDebugModeInterface creates a new instance of MockDebugModeInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDebugModeInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDebugModeInterface {
	mock := &MockDebugModeInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
