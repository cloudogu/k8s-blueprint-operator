// Code generated by mockery v2.42.1. DO NOT EDIT.

package etcd

import (
	registry "github.com/cloudogu/cesapp-lib/registry"
	mock "github.com/stretchr/testify/mock"
)

// mockEtcdStore is an autogenerated mock type for the etcdStore type
type mockEtcdStore struct {
	mock.Mock
}

type mockEtcdStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockEtcdStore) EXPECT() *mockEtcdStore_Expecter {
	return &mockEtcdStore_Expecter{mock: &_m.Mock}
}

// BlueprintRegistry provides a mock function with given fields:
func (_m *mockEtcdStore) BlueprintRegistry() registry.ConfigurationContext {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlueprintRegistry")
	}

	var r0 registry.ConfigurationContext
	if rf, ok := ret.Get(0).(func() registry.ConfigurationContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registry.ConfigurationContext)
		}
	}

	return r0
}

// mockEtcdStore_BlueprintRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlueprintRegistry'
type mockEtcdStore_BlueprintRegistry_Call struct {
	*mock.Call
}

// BlueprintRegistry is a helper method to define mock.On call
func (_e *mockEtcdStore_Expecter) BlueprintRegistry() *mockEtcdStore_BlueprintRegistry_Call {
	return &mockEtcdStore_BlueprintRegistry_Call{Call: _e.mock.On("BlueprintRegistry")}
}

func (_c *mockEtcdStore_BlueprintRegistry_Call) Run(run func()) *mockEtcdStore_BlueprintRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockEtcdStore_BlueprintRegistry_Call) Return(_a0 registry.ConfigurationContext) *mockEtcdStore_BlueprintRegistry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockEtcdStore_BlueprintRegistry_Call) RunAndReturn(run func() registry.ConfigurationContext) *mockEtcdStore_BlueprintRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// DoguConfig provides a mock function with given fields: dogu
func (_m *mockEtcdStore) DoguConfig(dogu string) registry.ConfigurationContext {
	ret := _m.Called(dogu)

	if len(ret) == 0 {
		panic("no return value specified for DoguConfig")
	}

	var r0 registry.ConfigurationContext
	if rf, ok := ret.Get(0).(func(string) registry.ConfigurationContext); ok {
		r0 = rf(dogu)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registry.ConfigurationContext)
		}
	}

	return r0
}

// mockEtcdStore_DoguConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoguConfig'
type mockEtcdStore_DoguConfig_Call struct {
	*mock.Call
}

// DoguConfig is a helper method to define mock.On call
//   - dogu string
func (_e *mockEtcdStore_Expecter) DoguConfig(dogu interface{}) *mockEtcdStore_DoguConfig_Call {
	return &mockEtcdStore_DoguConfig_Call{Call: _e.mock.On("DoguConfig", dogu)}
}

func (_c *mockEtcdStore_DoguConfig_Call) Run(run func(dogu string)) *mockEtcdStore_DoguConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockEtcdStore_DoguConfig_Call) Return(_a0 registry.ConfigurationContext) *mockEtcdStore_DoguConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockEtcdStore_DoguConfig_Call) RunAndReturn(run func(string) registry.ConfigurationContext) *mockEtcdStore_DoguConfig_Call {
	_c.Call.Return(run)
	return _c
}

// DoguRegistry provides a mock function with given fields:
func (_m *mockEtcdStore) DoguRegistry() registry.DoguRegistry {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DoguRegistry")
	}

	var r0 registry.DoguRegistry
	if rf, ok := ret.Get(0).(func() registry.DoguRegistry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registry.DoguRegistry)
		}
	}

	return r0
}

// mockEtcdStore_DoguRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoguRegistry'
type mockEtcdStore_DoguRegistry_Call struct {
	*mock.Call
}

// DoguRegistry is a helper method to define mock.On call
func (_e *mockEtcdStore_Expecter) DoguRegistry() *mockEtcdStore_DoguRegistry_Call {
	return &mockEtcdStore_DoguRegistry_Call{Call: _e.mock.On("DoguRegistry")}
}

func (_c *mockEtcdStore_DoguRegistry_Call) Run(run func()) *mockEtcdStore_DoguRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockEtcdStore_DoguRegistry_Call) Return(_a0 registry.DoguRegistry) *mockEtcdStore_DoguRegistry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockEtcdStore_DoguRegistry_Call) RunAndReturn(run func() registry.DoguRegistry) *mockEtcdStore_DoguRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// GetNode provides a mock function with given fields:
func (_m *mockEtcdStore) GetNode() (registry.Node, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNode")
	}

	var r0 registry.Node
	var r1 error
	if rf, ok := ret.Get(0).(func() (registry.Node, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() registry.Node); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(registry.Node)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockEtcdStore_GetNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNode'
type mockEtcdStore_GetNode_Call struct {
	*mock.Call
}

// GetNode is a helper method to define mock.On call
func (_e *mockEtcdStore_Expecter) GetNode() *mockEtcdStore_GetNode_Call {
	return &mockEtcdStore_GetNode_Call{Call: _e.mock.On("GetNode")}
}

func (_c *mockEtcdStore_GetNode_Call) Run(run func()) *mockEtcdStore_GetNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockEtcdStore_GetNode_Call) Return(_a0 registry.Node, _a1 error) *mockEtcdStore_GetNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockEtcdStore_GetNode_Call) RunAndReturn(run func() (registry.Node, error)) *mockEtcdStore_GetNode_Call {
	_c.Call.Return(run)
	return _c
}

// GlobalConfig provides a mock function with given fields:
func (_m *mockEtcdStore) GlobalConfig() registry.ConfigurationContext {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GlobalConfig")
	}

	var r0 registry.ConfigurationContext
	if rf, ok := ret.Get(0).(func() registry.ConfigurationContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registry.ConfigurationContext)
		}
	}

	return r0
}

// mockEtcdStore_GlobalConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GlobalConfig'
type mockEtcdStore_GlobalConfig_Call struct {
	*mock.Call
}

// GlobalConfig is a helper method to define mock.On call
func (_e *mockEtcdStore_Expecter) GlobalConfig() *mockEtcdStore_GlobalConfig_Call {
	return &mockEtcdStore_GlobalConfig_Call{Call: _e.mock.On("GlobalConfig")}
}

func (_c *mockEtcdStore_GlobalConfig_Call) Run(run func()) *mockEtcdStore_GlobalConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockEtcdStore_GlobalConfig_Call) Return(_a0 registry.ConfigurationContext) *mockEtcdStore_GlobalConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockEtcdStore_GlobalConfig_Call) RunAndReturn(run func() registry.ConfigurationContext) *mockEtcdStore_GlobalConfig_Call {
	_c.Call.Return(run)
	return _c
}

// HostConfig provides a mock function with given fields: hostService
func (_m *mockEtcdStore) HostConfig(hostService string) registry.ConfigurationContext {
	ret := _m.Called(hostService)

	if len(ret) == 0 {
		panic("no return value specified for HostConfig")
	}

	var r0 registry.ConfigurationContext
	if rf, ok := ret.Get(0).(func(string) registry.ConfigurationContext); ok {
		r0 = rf(hostService)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registry.ConfigurationContext)
		}
	}

	return r0
}

// mockEtcdStore_HostConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HostConfig'
type mockEtcdStore_HostConfig_Call struct {
	*mock.Call
}

// HostConfig is a helper method to define mock.On call
//   - hostService string
func (_e *mockEtcdStore_Expecter) HostConfig(hostService interface{}) *mockEtcdStore_HostConfig_Call {
	return &mockEtcdStore_HostConfig_Call{Call: _e.mock.On("HostConfig", hostService)}
}

func (_c *mockEtcdStore_HostConfig_Call) Run(run func(hostService string)) *mockEtcdStore_HostConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockEtcdStore_HostConfig_Call) Return(_a0 registry.ConfigurationContext) *mockEtcdStore_HostConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockEtcdStore_HostConfig_Call) RunAndReturn(run func(string) registry.ConfigurationContext) *mockEtcdStore_HostConfig_Call {
	_c.Call.Return(run)
	return _c
}

// RootConfig provides a mock function with given fields:
func (_m *mockEtcdStore) RootConfig() registry.WatchConfigurationContext {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RootConfig")
	}

	var r0 registry.WatchConfigurationContext
	if rf, ok := ret.Get(0).(func() registry.WatchConfigurationContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registry.WatchConfigurationContext)
		}
	}

	return r0
}

// mockEtcdStore_RootConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RootConfig'
type mockEtcdStore_RootConfig_Call struct {
	*mock.Call
}

// RootConfig is a helper method to define mock.On call
func (_e *mockEtcdStore_Expecter) RootConfig() *mockEtcdStore_RootConfig_Call {
	return &mockEtcdStore_RootConfig_Call{Call: _e.mock.On("RootConfig")}
}

func (_c *mockEtcdStore_RootConfig_Call) Run(run func()) *mockEtcdStore_RootConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockEtcdStore_RootConfig_Call) Return(_a0 registry.WatchConfigurationContext) *mockEtcdStore_RootConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockEtcdStore_RootConfig_Call) RunAndReturn(run func() registry.WatchConfigurationContext) *mockEtcdStore_RootConfig_Call {
	_c.Call.Return(run)
	return _c
}

// State provides a mock function with given fields: dogu
func (_m *mockEtcdStore) State(dogu string) registry.State {
	ret := _m.Called(dogu)

	if len(ret) == 0 {
		panic("no return value specified for State")
	}

	var r0 registry.State
	if rf, ok := ret.Get(0).(func(string) registry.State); ok {
		r0 = rf(dogu)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registry.State)
		}
	}

	return r0
}

// mockEtcdStore_State_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'State'
type mockEtcdStore_State_Call struct {
	*mock.Call
}

// State is a helper method to define mock.On call
//   - dogu string
func (_e *mockEtcdStore_Expecter) State(dogu interface{}) *mockEtcdStore_State_Call {
	return &mockEtcdStore_State_Call{Call: _e.mock.On("State", dogu)}
}

func (_c *mockEtcdStore_State_Call) Run(run func(dogu string)) *mockEtcdStore_State_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockEtcdStore_State_Call) Return(_a0 registry.State) *mockEtcdStore_State_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockEtcdStore_State_Call) RunAndReturn(run func(string) registry.State) *mockEtcdStore_State_Call {
	_c.Call.Return(run)
	return _c
}

// newMockEtcdStore creates a new instance of mockEtcdStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockEtcdStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockEtcdStore {
	mock := &mockEtcdStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
