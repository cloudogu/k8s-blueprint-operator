// Code generated by mockery v2.20.0. DO NOT EDIT.

package maintenance

import mock "github.com/stretchr/testify/mock"

// mockLock is an autogenerated mock type for the lock type
type mockLock struct {
	mock.Mock
}

type mockLock_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLock) EXPECT() *mockLock_Expecter {
	return &mockLock_Expecter{mock: &_m.Mock}
}

// isActiveAndOurs provides a mock function with given fields:
func (_m *mockLock) isActiveAndOurs() (bool, bool, error) {
	ret := _m.Called()

	var r0 bool
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func() (bool, bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// mockLock_isActiveAndOurs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'isActiveAndOurs'
type mockLock_isActiveAndOurs_Call struct {
	*mock.Call
}

// isActiveAndOurs is a helper method to define mock.On call
func (_e *mockLock_Expecter) isActiveAndOurs() *mockLock_isActiveAndOurs_Call {
	return &mockLock_isActiveAndOurs_Call{Call: _e.mock.On("isActiveAndOurs")}
}

func (_c *mockLock_isActiveAndOurs_Call) Run(run func()) *mockLock_isActiveAndOurs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockLock_isActiveAndOurs_Call) Return(_a0 bool, _a1 bool, _a2 error) *mockLock_isActiveAndOurs_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *mockLock_isActiveAndOurs_Call) RunAndReturn(run func() (bool, bool, error)) *mockLock_isActiveAndOurs_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockLock interface {
	mock.TestingT
	Cleanup(func())
}

// newMockLock creates a new instance of mockLock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockLock(t mockConstructorTestingTnewMockLock) *mockLock {
	mock := &mockLock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
