// Code generated by mockery v2.42.1. DO NOT EDIT.

package reconciler

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockBlueprintChangeHandler is an autogenerated mock type for the BlueprintChangeHandler type
type MockBlueprintChangeHandler struct {
	mock.Mock
}

type MockBlueprintChangeHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlueprintChangeHandler) EXPECT() *MockBlueprintChangeHandler_Expecter {
	return &MockBlueprintChangeHandler_Expecter{mock: &_m.Mock}
}

// HandleChange provides a mock function with given fields: ctx, blueprintId
func (_m *MockBlueprintChangeHandler) HandleChange(ctx context.Context, blueprintId string) error {
	ret := _m.Called(ctx, blueprintId)

	if len(ret) == 0 {
		panic("no return value specified for HandleChange")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, blueprintId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlueprintChangeHandler_HandleChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleChange'
type MockBlueprintChangeHandler_HandleChange_Call struct {
	*mock.Call
}

// HandleChange is a helper method to define mock.On call
//   - ctx context.Context
//   - blueprintId string
func (_e *MockBlueprintChangeHandler_Expecter) HandleChange(ctx interface{}, blueprintId interface{}) *MockBlueprintChangeHandler_HandleChange_Call {
	return &MockBlueprintChangeHandler_HandleChange_Call{Call: _e.mock.On("HandleChange", ctx, blueprintId)}
}

func (_c *MockBlueprintChangeHandler_HandleChange_Call) Run(run func(ctx context.Context, blueprintId string)) *MockBlueprintChangeHandler_HandleChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBlueprintChangeHandler_HandleChange_Call) Return(_a0 error) *MockBlueprintChangeHandler_HandleChange_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlueprintChangeHandler_HandleChange_Call) RunAndReturn(run func(context.Context, string) error) *MockBlueprintChangeHandler_HandleChange_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlueprintChangeHandler creates a new instance of MockBlueprintChangeHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlueprintChangeHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlueprintChangeHandler {
	mock := &MockBlueprintChangeHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
