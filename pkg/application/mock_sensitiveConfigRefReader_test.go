// Code generated by mockery v2.53.3. DO NOT EDIT.

package application

import (
	common "github.com/cloudogu/k8s-blueprint-operator/v2/pkg/domain/common"
	config "github.com/cloudogu/k8s-registry-lib/config"

	context "context"

	domain "github.com/cloudogu/k8s-blueprint-operator/v2/pkg/domain"

	mock "github.com/stretchr/testify/mock"
)

// mockSensitiveConfigRefReader is an autogenerated mock type for the sensitiveConfigRefReader type
type mockSensitiveConfigRefReader struct {
	mock.Mock
}

type mockSensitiveConfigRefReader_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSensitiveConfigRefReader) EXPECT() *mockSensitiveConfigRefReader_Expecter {
	return &mockSensitiveConfigRefReader_Expecter{mock: &_m.Mock}
}

// GetGlobalValues provides a mock function with given fields: ctx, refs
func (_m *mockSensitiveConfigRefReader) GetGlobalValues(ctx context.Context, refs map[config.Key]domain.SensitiveValueRef) (map[config.Key]config.Value, error) {
	ret := _m.Called(ctx, refs)

	if len(ret) == 0 {
		panic("no return value specified for GetGlobalValues")
	}

	var r0 map[config.Key]config.Value
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[config.Key]domain.SensitiveValueRef) (map[config.Key]config.Value, error)); ok {
		return rf(ctx, refs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[config.Key]domain.SensitiveValueRef) map[config.Key]config.Value); ok {
		r0 = rf(ctx, refs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[config.Key]config.Value)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[config.Key]domain.SensitiveValueRef) error); ok {
		r1 = rf(ctx, refs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockSensitiveConfigRefReader_GetGlobalValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGlobalValues'
type mockSensitiveConfigRefReader_GetGlobalValues_Call struct {
	*mock.Call
}

// GetGlobalValues is a helper method to define mock.On call
//   - ctx context.Context
//   - refs map[config.Key]domain.SensitiveValueRef
func (_e *mockSensitiveConfigRefReader_Expecter) GetGlobalValues(ctx interface{}, refs interface{}) *mockSensitiveConfigRefReader_GetGlobalValues_Call {
	return &mockSensitiveConfigRefReader_GetGlobalValues_Call{Call: _e.mock.On("GetGlobalValues", ctx, refs)}
}

func (_c *mockSensitiveConfigRefReader_GetGlobalValues_Call) Run(run func(ctx context.Context, refs map[config.Key]domain.SensitiveValueRef)) *mockSensitiveConfigRefReader_GetGlobalValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[config.Key]domain.SensitiveValueRef))
	})
	return _c
}

func (_c *mockSensitiveConfigRefReader_GetGlobalValues_Call) Return(_a0 map[config.Key]config.Value, _a1 error) *mockSensitiveConfigRefReader_GetGlobalValues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockSensitiveConfigRefReader_GetGlobalValues_Call) RunAndReturn(run func(context.Context, map[config.Key]domain.SensitiveValueRef) (map[config.Key]config.Value, error)) *mockSensitiveConfigRefReader_GetGlobalValues_Call {
	_c.Call.Return(run)
	return _c
}

// GetValues provides a mock function with given fields: ctx, refs
func (_m *mockSensitiveConfigRefReader) GetValues(ctx context.Context, refs map[common.DoguConfigKey]domain.SensitiveValueRef) (map[common.DoguConfigKey]config.Value, error) {
	ret := _m.Called(ctx, refs)

	if len(ret) == 0 {
		panic("no return value specified for GetValues")
	}

	var r0 map[common.DoguConfigKey]config.Value
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[common.DoguConfigKey]domain.SensitiveValueRef) (map[common.DoguConfigKey]config.Value, error)); ok {
		return rf(ctx, refs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[common.DoguConfigKey]domain.SensitiveValueRef) map[common.DoguConfigKey]config.Value); ok {
		r0 = rf(ctx, refs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[common.DoguConfigKey]config.Value)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[common.DoguConfigKey]domain.SensitiveValueRef) error); ok {
		r1 = rf(ctx, refs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockSensitiveConfigRefReader_GetValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValues'
type mockSensitiveConfigRefReader_GetValues_Call struct {
	*mock.Call
}

// GetValues is a helper method to define mock.On call
//   - ctx context.Context
//   - refs map[common.DoguConfigKey]domain.SensitiveValueRef
func (_e *mockSensitiveConfigRefReader_Expecter) GetValues(ctx interface{}, refs interface{}) *mockSensitiveConfigRefReader_GetValues_Call {
	return &mockSensitiveConfigRefReader_GetValues_Call{Call: _e.mock.On("GetValues", ctx, refs)}
}

func (_c *mockSensitiveConfigRefReader_GetValues_Call) Run(run func(ctx context.Context, refs map[common.DoguConfigKey]domain.SensitiveValueRef)) *mockSensitiveConfigRefReader_GetValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[common.DoguConfigKey]domain.SensitiveValueRef))
	})
	return _c
}

func (_c *mockSensitiveConfigRefReader_GetValues_Call) Return(_a0 map[common.DoguConfigKey]config.Value, _a1 error) *mockSensitiveConfigRefReader_GetValues_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockSensitiveConfigRefReader_GetValues_Call) RunAndReturn(run func(context.Context, map[common.DoguConfigKey]domain.SensitiveValueRef) (map[common.DoguConfigKey]config.Value, error)) *mockSensitiveConfigRefReader_GetValues_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSensitiveConfigRefReader creates a new instance of mockSensitiveConfigRefReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSensitiveConfigRefReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSensitiveConfigRefReader {
	mock := &mockSensitiveConfigRefReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
