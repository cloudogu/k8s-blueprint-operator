// Code generated by mockery v2.53.3. DO NOT EDIT.

package application

import (
	context "context"

	domain "github.com/cloudogu/k8s-blueprint-operator/v2/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// mockApplyComponentsUseCase is an autogenerated mock type for the applyComponentsUseCase type
type mockApplyComponentsUseCase struct {
	mock.Mock
}

type mockApplyComponentsUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *mockApplyComponentsUseCase) EXPECT() *mockApplyComponentsUseCase_Expecter {
	return &mockApplyComponentsUseCase_Expecter{mock: &_m.Mock}
}

// ApplyComponents provides a mock function with given fields: ctx, blueprint
func (_m *mockApplyComponentsUseCase) ApplyComponents(ctx context.Context, blueprint *domain.BlueprintSpec) error {
	ret := _m.Called(ctx, blueprint)

	if len(ret) == 0 {
		panic("no return value specified for ApplyComponents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BlueprintSpec) error); ok {
		r0 = rf(ctx, blueprint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockApplyComponentsUseCase_ApplyComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyComponents'
type mockApplyComponentsUseCase_ApplyComponents_Call struct {
	*mock.Call
}

// ApplyComponents is a helper method to define mock.On call
//   - ctx context.Context
//   - blueprint *domain.BlueprintSpec
func (_e *mockApplyComponentsUseCase_Expecter) ApplyComponents(ctx interface{}, blueprint interface{}) *mockApplyComponentsUseCase_ApplyComponents_Call {
	return &mockApplyComponentsUseCase_ApplyComponents_Call{Call: _e.mock.On("ApplyComponents", ctx, blueprint)}
}

func (_c *mockApplyComponentsUseCase_ApplyComponents_Call) Run(run func(ctx context.Context, blueprint *domain.BlueprintSpec)) *mockApplyComponentsUseCase_ApplyComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.BlueprintSpec))
	})
	return _c
}

func (_c *mockApplyComponentsUseCase_ApplyComponents_Call) Return(_a0 error) *mockApplyComponentsUseCase_ApplyComponents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockApplyComponentsUseCase_ApplyComponents_Call) RunAndReturn(run func(context.Context, *domain.BlueprintSpec) error) *mockApplyComponentsUseCase_ApplyComponents_Call {
	_c.Call.Return(run)
	return _c
}

// newMockApplyComponentsUseCase creates a new instance of mockApplyComponentsUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockApplyComponentsUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockApplyComponentsUseCase {
	mock := &mockApplyComponentsUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
