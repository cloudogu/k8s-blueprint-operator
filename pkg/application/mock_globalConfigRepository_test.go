// Code generated by mockery v2.53.3. DO NOT EDIT.

package application

import (
	context "context"

	config "github.com/cloudogu/k8s-registry-lib/config"

	mock "github.com/stretchr/testify/mock"
)

// mockGlobalConfigRepository is an autogenerated mock type for the globalConfigRepository type
type mockGlobalConfigRepository struct {
	mock.Mock
}

type mockGlobalConfigRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *mockGlobalConfigRepository) EXPECT() *mockGlobalConfigRepository_Expecter {
	return &mockGlobalConfigRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx
func (_m *mockGlobalConfigRepository) Get(ctx context.Context) (config.GlobalConfig, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 config.GlobalConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (config.GlobalConfig, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) config.GlobalConfig); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(config.GlobalConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockGlobalConfigRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockGlobalConfigRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockGlobalConfigRepository_Expecter) Get(ctx interface{}) *mockGlobalConfigRepository_Get_Call {
	return &mockGlobalConfigRepository_Get_Call{Call: _e.mock.On("Get", ctx)}
}

func (_c *mockGlobalConfigRepository_Get_Call) Run(run func(ctx context.Context)) *mockGlobalConfigRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockGlobalConfigRepository_Get_Call) Return(_a0 config.GlobalConfig, _a1 error) *mockGlobalConfigRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockGlobalConfigRepository_Get_Call) RunAndReturn(run func(context.Context) (config.GlobalConfig, error)) *mockGlobalConfigRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *mockGlobalConfigRepository) Update(ctx context.Context, _a1 config.GlobalConfig) (config.GlobalConfig, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 config.GlobalConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.GlobalConfig) (config.GlobalConfig, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.GlobalConfig) config.GlobalConfig); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(config.GlobalConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.GlobalConfig) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockGlobalConfigRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type mockGlobalConfigRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 config.GlobalConfig
func (_e *mockGlobalConfigRepository_Expecter) Update(ctx interface{}, _a1 interface{}) *mockGlobalConfigRepository_Update_Call {
	return &mockGlobalConfigRepository_Update_Call{Call: _e.mock.On("Update", ctx, _a1)}
}

func (_c *mockGlobalConfigRepository_Update_Call) Run(run func(ctx context.Context, _a1 config.GlobalConfig)) *mockGlobalConfigRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.GlobalConfig))
	})
	return _c
}

func (_c *mockGlobalConfigRepository_Update_Call) Return(_a0 config.GlobalConfig, _a1 error) *mockGlobalConfigRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockGlobalConfigRepository_Update_Call) RunAndReturn(run func(context.Context, config.GlobalConfig) (config.GlobalConfig, error)) *mockGlobalConfigRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// newMockGlobalConfigRepository creates a new instance of mockGlobalConfigRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockGlobalConfigRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockGlobalConfigRepository {
	mock := &mockGlobalConfigRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
