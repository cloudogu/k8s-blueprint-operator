// Code generated by mockery v2.53.3. DO NOT EDIT.

package application

import (
	context "context"

	domain "github.com/cloudogu/k8s-blueprint-operator/v2/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// mockCompleteBlueprintUseCase is an autogenerated mock type for the completeBlueprintUseCase type
type mockCompleteBlueprintUseCase struct {
	mock.Mock
}

type mockCompleteBlueprintUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *mockCompleteBlueprintUseCase) EXPECT() *mockCompleteBlueprintUseCase_Expecter {
	return &mockCompleteBlueprintUseCase_Expecter{mock: &_m.Mock}
}

// CompleteBlueprint provides a mock function with given fields: ctx, blueprint
func (_m *mockCompleteBlueprintUseCase) CompleteBlueprint(ctx context.Context, blueprint *domain.BlueprintSpec) error {
	ret := _m.Called(ctx, blueprint)

	if len(ret) == 0 {
		panic("no return value specified for CompleteBlueprint")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BlueprintSpec) error); ok {
		r0 = rf(ctx, blueprint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockCompleteBlueprintUseCase_CompleteBlueprint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteBlueprint'
type mockCompleteBlueprintUseCase_CompleteBlueprint_Call struct {
	*mock.Call
}

// CompleteBlueprint is a helper method to define mock.On call
//   - ctx context.Context
//   - blueprint *domain.BlueprintSpec
func (_e *mockCompleteBlueprintUseCase_Expecter) CompleteBlueprint(ctx interface{}, blueprint interface{}) *mockCompleteBlueprintUseCase_CompleteBlueprint_Call {
	return &mockCompleteBlueprintUseCase_CompleteBlueprint_Call{Call: _e.mock.On("CompleteBlueprint", ctx, blueprint)}
}

func (_c *mockCompleteBlueprintUseCase_CompleteBlueprint_Call) Run(run func(ctx context.Context, blueprint *domain.BlueprintSpec)) *mockCompleteBlueprintUseCase_CompleteBlueprint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.BlueprintSpec))
	})
	return _c
}

func (_c *mockCompleteBlueprintUseCase_CompleteBlueprint_Call) Return(_a0 error) *mockCompleteBlueprintUseCase_CompleteBlueprint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCompleteBlueprintUseCase_CompleteBlueprint_Call) RunAndReturn(run func(context.Context, *domain.BlueprintSpec) error) *mockCompleteBlueprintUseCase_CompleteBlueprint_Call {
	_c.Call.Return(run)
	return _c
}

// newMockCompleteBlueprintUseCase creates a new instance of mockCompleteBlueprintUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCompleteBlueprintUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCompleteBlueprintUseCase {
	mock := &mockCompleteBlueprintUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
