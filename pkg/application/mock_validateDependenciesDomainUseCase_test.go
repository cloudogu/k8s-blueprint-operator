// Code generated by mockery v2.53.3. DO NOT EDIT.

package application

import (
	context "context"

	domain "github.com/cloudogu/k8s-blueprint-operator/v2/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// mockValidateDependenciesDomainUseCase is an autogenerated mock type for the validateDependenciesDomainUseCase type
type mockValidateDependenciesDomainUseCase struct {
	mock.Mock
}

type mockValidateDependenciesDomainUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *mockValidateDependenciesDomainUseCase) EXPECT() *mockValidateDependenciesDomainUseCase_Expecter {
	return &mockValidateDependenciesDomainUseCase_Expecter{mock: &_m.Mock}
}

// ValidateDependenciesForAllDogus provides a mock function with given fields: ctx, effectiveBlueprint
func (_m *mockValidateDependenciesDomainUseCase) ValidateDependenciesForAllDogus(ctx context.Context, effectiveBlueprint domain.EffectiveBlueprint) error {
	ret := _m.Called(ctx, effectiveBlueprint)

	if len(ret) == 0 {
		panic("no return value specified for ValidateDependenciesForAllDogus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.EffectiveBlueprint) error); ok {
		r0 = rf(ctx, effectiveBlueprint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockValidateDependenciesDomainUseCase_ValidateDependenciesForAllDogus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateDependenciesForAllDogus'
type mockValidateDependenciesDomainUseCase_ValidateDependenciesForAllDogus_Call struct {
	*mock.Call
}

// ValidateDependenciesForAllDogus is a helper method to define mock.On call
//   - ctx context.Context
//   - effectiveBlueprint domain.EffectiveBlueprint
func (_e *mockValidateDependenciesDomainUseCase_Expecter) ValidateDependenciesForAllDogus(ctx interface{}, effectiveBlueprint interface{}) *mockValidateDependenciesDomainUseCase_ValidateDependenciesForAllDogus_Call {
	return &mockValidateDependenciesDomainUseCase_ValidateDependenciesForAllDogus_Call{Call: _e.mock.On("ValidateDependenciesForAllDogus", ctx, effectiveBlueprint)}
}

func (_c *mockValidateDependenciesDomainUseCase_ValidateDependenciesForAllDogus_Call) Run(run func(ctx context.Context, effectiveBlueprint domain.EffectiveBlueprint)) *mockValidateDependenciesDomainUseCase_ValidateDependenciesForAllDogus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.EffectiveBlueprint))
	})
	return _c
}

func (_c *mockValidateDependenciesDomainUseCase_ValidateDependenciesForAllDogus_Call) Return(_a0 error) *mockValidateDependenciesDomainUseCase_ValidateDependenciesForAllDogus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockValidateDependenciesDomainUseCase_ValidateDependenciesForAllDogus_Call) RunAndReturn(run func(context.Context, domain.EffectiveBlueprint) error) *mockValidateDependenciesDomainUseCase_ValidateDependenciesForAllDogus_Call {
	_c.Call.Return(run)
	return _c
}

// newMockValidateDependenciesDomainUseCase creates a new instance of mockValidateDependenciesDomainUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockValidateDependenciesDomainUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockValidateDependenciesDomainUseCase {
	mock := &mockValidateDependenciesDomainUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
