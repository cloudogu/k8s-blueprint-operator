// Code generated by mockery v2.42.1. DO NOT EDIT.

package application

import (
	context "context"

	common "github.com/cloudogu/k8s-blueprint-operator/pkg/domain/common"

	mock "github.com/stretchr/testify/mock"
)

// mockConfigEncryptionAdapter is an autogenerated mock type for the configEncryptionAdapter type
type mockConfigEncryptionAdapter struct {
	mock.Mock
}

type mockConfigEncryptionAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockConfigEncryptionAdapter) EXPECT() *mockConfigEncryptionAdapter_Expecter {
	return &mockConfigEncryptionAdapter_Expecter{mock: &_m.Mock}
}

// Decrypt provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockConfigEncryptionAdapter) Decrypt(_a0 context.Context, _a1 common.SimpleDoguName, _a2 common.EncryptedDoguConfigValue) (common.SensitiveDoguConfigValue, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Decrypt")
	}

	var r0 common.SensitiveDoguConfigValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.SimpleDoguName, common.EncryptedDoguConfigValue) (common.SensitiveDoguConfigValue, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.SimpleDoguName, common.EncryptedDoguConfigValue) common.SensitiveDoguConfigValue); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(common.SensitiveDoguConfigValue)
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.SimpleDoguName, common.EncryptedDoguConfigValue) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockConfigEncryptionAdapter_Decrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrypt'
type mockConfigEncryptionAdapter_Decrypt_Call struct {
	*mock.Call
}

// Decrypt is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 common.SimpleDoguName
//   - _a2 common.EncryptedDoguConfigValue
func (_e *mockConfigEncryptionAdapter_Expecter) Decrypt(_a0 interface{}, _a1 interface{}, _a2 interface{}) *mockConfigEncryptionAdapter_Decrypt_Call {
	return &mockConfigEncryptionAdapter_Decrypt_Call{Call: _e.mock.On("Decrypt", _a0, _a1, _a2)}
}

func (_c *mockConfigEncryptionAdapter_Decrypt_Call) Run(run func(_a0 context.Context, _a1 common.SimpleDoguName, _a2 common.EncryptedDoguConfigValue)) *mockConfigEncryptionAdapter_Decrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.SimpleDoguName), args[2].(common.EncryptedDoguConfigValue))
	})
	return _c
}

func (_c *mockConfigEncryptionAdapter_Decrypt_Call) Return(_a0 common.SensitiveDoguConfigValue, _a1 error) *mockConfigEncryptionAdapter_Decrypt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockConfigEncryptionAdapter_Decrypt_Call) RunAndReturn(run func(context.Context, common.SimpleDoguName, common.EncryptedDoguConfigValue) (common.SensitiveDoguConfigValue, error)) *mockConfigEncryptionAdapter_Decrypt_Call {
	_c.Call.Return(run)
	return _c
}

// DecryptAll provides a mock function with given fields: _a0, _a1
func (_m *mockConfigEncryptionAdapter) DecryptAll(_a0 context.Context, _a1 map[common.SensitiveDoguConfigKey]common.EncryptedDoguConfigValue) (map[common.SensitiveDoguConfigKey]common.SensitiveDoguConfigValue, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DecryptAll")
	}

	var r0 map[common.SensitiveDoguConfigKey]common.SensitiveDoguConfigValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[common.SensitiveDoguConfigKey]common.EncryptedDoguConfigValue) (map[common.SensitiveDoguConfigKey]common.SensitiveDoguConfigValue, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[common.SensitiveDoguConfigKey]common.EncryptedDoguConfigValue) map[common.SensitiveDoguConfigKey]common.SensitiveDoguConfigValue); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[common.SensitiveDoguConfigKey]common.SensitiveDoguConfigValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[common.SensitiveDoguConfigKey]common.EncryptedDoguConfigValue) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockConfigEncryptionAdapter_DecryptAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecryptAll'
type mockConfigEncryptionAdapter_DecryptAll_Call struct {
	*mock.Call
}

// DecryptAll is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 map[common.SensitiveDoguConfigKey]common.EncryptedDoguConfigValue
func (_e *mockConfigEncryptionAdapter_Expecter) DecryptAll(_a0 interface{}, _a1 interface{}) *mockConfigEncryptionAdapter_DecryptAll_Call {
	return &mockConfigEncryptionAdapter_DecryptAll_Call{Call: _e.mock.On("DecryptAll", _a0, _a1)}
}

func (_c *mockConfigEncryptionAdapter_DecryptAll_Call) Run(run func(_a0 context.Context, _a1 map[common.SensitiveDoguConfigKey]common.EncryptedDoguConfigValue)) *mockConfigEncryptionAdapter_DecryptAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[common.SensitiveDoguConfigKey]common.EncryptedDoguConfigValue))
	})
	return _c
}

func (_c *mockConfigEncryptionAdapter_DecryptAll_Call) Return(_a0 map[common.SensitiveDoguConfigKey]common.SensitiveDoguConfigValue, _a1 error) *mockConfigEncryptionAdapter_DecryptAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockConfigEncryptionAdapter_DecryptAll_Call) RunAndReturn(run func(context.Context, map[common.SensitiveDoguConfigKey]common.EncryptedDoguConfigValue) (map[common.SensitiveDoguConfigKey]common.SensitiveDoguConfigValue, error)) *mockConfigEncryptionAdapter_DecryptAll_Call {
	_c.Call.Return(run)
	return _c
}

// Encrypt provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockConfigEncryptionAdapter) Encrypt(_a0 context.Context, _a1 common.SimpleDoguName, _a2 common.SensitiveDoguConfigValue) (common.EncryptedDoguConfigValue, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 common.EncryptedDoguConfigValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.SimpleDoguName, common.SensitiveDoguConfigValue) (common.EncryptedDoguConfigValue, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.SimpleDoguName, common.SensitiveDoguConfigValue) common.EncryptedDoguConfigValue); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(common.EncryptedDoguConfigValue)
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.SimpleDoguName, common.SensitiveDoguConfigValue) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockConfigEncryptionAdapter_Encrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encrypt'
type mockConfigEncryptionAdapter_Encrypt_Call struct {
	*mock.Call
}

// Encrypt is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 common.SimpleDoguName
//   - _a2 common.SensitiveDoguConfigValue
func (_e *mockConfigEncryptionAdapter_Expecter) Encrypt(_a0 interface{}, _a1 interface{}, _a2 interface{}) *mockConfigEncryptionAdapter_Encrypt_Call {
	return &mockConfigEncryptionAdapter_Encrypt_Call{Call: _e.mock.On("Encrypt", _a0, _a1, _a2)}
}

func (_c *mockConfigEncryptionAdapter_Encrypt_Call) Run(run func(_a0 context.Context, _a1 common.SimpleDoguName, _a2 common.SensitiveDoguConfigValue)) *mockConfigEncryptionAdapter_Encrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.SimpleDoguName), args[2].(common.SensitiveDoguConfigValue))
	})
	return _c
}

func (_c *mockConfigEncryptionAdapter_Encrypt_Call) Return(_a0 common.EncryptedDoguConfigValue, _a1 error) *mockConfigEncryptionAdapter_Encrypt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockConfigEncryptionAdapter_Encrypt_Call) RunAndReturn(run func(context.Context, common.SimpleDoguName, common.SensitiveDoguConfigValue) (common.EncryptedDoguConfigValue, error)) *mockConfigEncryptionAdapter_Encrypt_Call {
	_c.Call.Return(run)
	return _c
}

// EncryptAll provides a mock function with given fields: _a0, _a1
func (_m *mockConfigEncryptionAdapter) EncryptAll(_a0 context.Context, _a1 map[common.SensitiveDoguConfigKey]common.SensitiveDoguConfigValue) (map[common.SensitiveDoguConfigKey]common.EncryptedDoguConfigValue, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for EncryptAll")
	}

	var r0 map[common.SensitiveDoguConfigKey]common.EncryptedDoguConfigValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[common.SensitiveDoguConfigKey]common.SensitiveDoguConfigValue) (map[common.SensitiveDoguConfigKey]common.EncryptedDoguConfigValue, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[common.SensitiveDoguConfigKey]common.SensitiveDoguConfigValue) map[common.SensitiveDoguConfigKey]common.EncryptedDoguConfigValue); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[common.SensitiveDoguConfigKey]common.EncryptedDoguConfigValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[common.SensitiveDoguConfigKey]common.SensitiveDoguConfigValue) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockConfigEncryptionAdapter_EncryptAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncryptAll'
type mockConfigEncryptionAdapter_EncryptAll_Call struct {
	*mock.Call
}

// EncryptAll is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 map[common.SensitiveDoguConfigKey]common.SensitiveDoguConfigValue
func (_e *mockConfigEncryptionAdapter_Expecter) EncryptAll(_a0 interface{}, _a1 interface{}) *mockConfigEncryptionAdapter_EncryptAll_Call {
	return &mockConfigEncryptionAdapter_EncryptAll_Call{Call: _e.mock.On("EncryptAll", _a0, _a1)}
}

func (_c *mockConfigEncryptionAdapter_EncryptAll_Call) Run(run func(_a0 context.Context, _a1 map[common.SensitiveDoguConfigKey]common.SensitiveDoguConfigValue)) *mockConfigEncryptionAdapter_EncryptAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[common.SensitiveDoguConfigKey]common.SensitiveDoguConfigValue))
	})
	return _c
}

func (_c *mockConfigEncryptionAdapter_EncryptAll_Call) Return(_a0 map[common.SensitiveDoguConfigKey]common.EncryptedDoguConfigValue, _a1 error) *mockConfigEncryptionAdapter_EncryptAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockConfigEncryptionAdapter_EncryptAll_Call) RunAndReturn(run func(context.Context, map[common.SensitiveDoguConfigKey]common.SensitiveDoguConfigValue) (map[common.SensitiveDoguConfigKey]common.EncryptedDoguConfigValue, error)) *mockConfigEncryptionAdapter_EncryptAll_Call {
	_c.Call.Return(run)
	return _c
}

// newMockConfigEncryptionAdapter creates a new instance of mockConfigEncryptionAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockConfigEncryptionAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockConfigEncryptionAdapter {
	mock := &mockConfigEncryptionAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
