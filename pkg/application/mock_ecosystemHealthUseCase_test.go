// Code generated by mockery v2.53.3. DO NOT EDIT.

package application

import (
	context "context"

	domain "github.com/cloudogu/k8s-blueprint-operator/v2/pkg/domain"
	ecosystem "github.com/cloudogu/k8s-blueprint-operator/v2/pkg/domain/ecosystem"

	mock "github.com/stretchr/testify/mock"
)

// mockEcosystemHealthUseCase is an autogenerated mock type for the ecosystemHealthUseCase type
type mockEcosystemHealthUseCase struct {
	mock.Mock
}

type mockEcosystemHealthUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *mockEcosystemHealthUseCase) EXPECT() *mockEcosystemHealthUseCase_Expecter {
	return &mockEcosystemHealthUseCase_Expecter{mock: &_m.Mock}
}

// CheckEcosystemHealth provides a mock function with given fields: _a0, _a1
func (_m *mockEcosystemHealthUseCase) CheckEcosystemHealth(_a0 context.Context, _a1 *domain.BlueprintSpec) (ecosystem.HealthResult, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CheckEcosystemHealth")
	}

	var r0 ecosystem.HealthResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BlueprintSpec) (ecosystem.HealthResult, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BlueprintSpec) ecosystem.HealthResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(ecosystem.HealthResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.BlueprintSpec) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockEcosystemHealthUseCase_CheckEcosystemHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckEcosystemHealth'
type mockEcosystemHealthUseCase_CheckEcosystemHealth_Call struct {
	*mock.Call
}

// CheckEcosystemHealth is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *domain.BlueprintSpec
func (_e *mockEcosystemHealthUseCase_Expecter) CheckEcosystemHealth(_a0 interface{}, _a1 interface{}) *mockEcosystemHealthUseCase_CheckEcosystemHealth_Call {
	return &mockEcosystemHealthUseCase_CheckEcosystemHealth_Call{Call: _e.mock.On("CheckEcosystemHealth", _a0, _a1)}
}

func (_c *mockEcosystemHealthUseCase_CheckEcosystemHealth_Call) Run(run func(_a0 context.Context, _a1 *domain.BlueprintSpec)) *mockEcosystemHealthUseCase_CheckEcosystemHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.BlueprintSpec))
	})
	return _c
}

func (_c *mockEcosystemHealthUseCase_CheckEcosystemHealth_Call) Return(_a0 ecosystem.HealthResult, _a1 error) *mockEcosystemHealthUseCase_CheckEcosystemHealth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockEcosystemHealthUseCase_CheckEcosystemHealth_Call) RunAndReturn(run func(context.Context, *domain.BlueprintSpec) (ecosystem.HealthResult, error)) *mockEcosystemHealthUseCase_CheckEcosystemHealth_Call {
	_c.Call.Return(run)
	return _c
}

// newMockEcosystemHealthUseCase creates a new instance of mockEcosystemHealthUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockEcosystemHealthUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockEcosystemHealthUseCase {
	mock := &mockEcosystemHealthUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
