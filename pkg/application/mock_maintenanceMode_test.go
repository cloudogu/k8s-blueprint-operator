// Code generated by mockery v2.53.3. DO NOT EDIT.

package application

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockMaintenanceMode is an autogenerated mock type for the maintenanceMode type
type mockMaintenanceMode struct {
	mock.Mock
}

type mockMaintenanceMode_Expecter struct {
	mock *mock.Mock
}

func (_m *mockMaintenanceMode) EXPECT() *mockMaintenanceMode_Expecter {
	return &mockMaintenanceMode_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function with given fields: ctx, title, text
func (_m *mockMaintenanceMode) Activate(ctx context.Context, title string, text string) error {
	ret := _m.Called(ctx, title, text)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, title, text)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockMaintenanceMode_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type mockMaintenanceMode_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - ctx context.Context
//   - title string
//   - text string
func (_e *mockMaintenanceMode_Expecter) Activate(ctx interface{}, title interface{}, text interface{}) *mockMaintenanceMode_Activate_Call {
	return &mockMaintenanceMode_Activate_Call{Call: _e.mock.On("Activate", ctx, title, text)}
}

func (_c *mockMaintenanceMode_Activate_Call) Run(run func(ctx context.Context, title string, text string)) *mockMaintenanceMode_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockMaintenanceMode_Activate_Call) Return(_a0 error) *mockMaintenanceMode_Activate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMaintenanceMode_Activate_Call) RunAndReturn(run func(context.Context, string, string) error) *mockMaintenanceMode_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// Deactivate provides a mock function with given fields: ctx
func (_m *mockMaintenanceMode) Deactivate(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Deactivate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockMaintenanceMode_Deactivate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deactivate'
type mockMaintenanceMode_Deactivate_Call struct {
	*mock.Call
}

// Deactivate is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockMaintenanceMode_Expecter) Deactivate(ctx interface{}) *mockMaintenanceMode_Deactivate_Call {
	return &mockMaintenanceMode_Deactivate_Call{Call: _e.mock.On("Deactivate", ctx)}
}

func (_c *mockMaintenanceMode_Deactivate_Call) Run(run func(ctx context.Context)) *mockMaintenanceMode_Deactivate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockMaintenanceMode_Deactivate_Call) Return(_a0 error) *mockMaintenanceMode_Deactivate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMaintenanceMode_Deactivate_Call) RunAndReturn(run func(context.Context) error) *mockMaintenanceMode_Deactivate_Call {
	_c.Call.Return(run)
	return _c
}

// newMockMaintenanceMode creates a new instance of mockMaintenanceMode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockMaintenanceMode(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockMaintenanceMode {
	mock := &mockMaintenanceMode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
