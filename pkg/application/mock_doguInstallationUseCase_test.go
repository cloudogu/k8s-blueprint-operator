// Code generated by mockery v2.20.0. DO NOT EDIT.

package application

import (
	context "context"

	ecosystem "github.com/cloudogu/k8s-blueprint-operator/pkg/domain/ecosystem"
	mock "github.com/stretchr/testify/mock"
)

// mockDoguInstallationUseCase is an autogenerated mock type for the doguInstallationUseCase type
type mockDoguInstallationUseCase struct {
	mock.Mock
}

type mockDoguInstallationUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDoguInstallationUseCase) EXPECT() *mockDoguInstallationUseCase_Expecter {
	return &mockDoguInstallationUseCase_Expecter{mock: &_m.Mock}
}

// ApplyDoguStates provides a mock function with given fields: ctx, blueprintId
func (_m *mockDoguInstallationUseCase) ApplyDoguStates(ctx context.Context, blueprintId string) error {
	ret := _m.Called(ctx, blueprintId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, blueprintId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDoguInstallationUseCase_ApplyDoguStates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyDoguStates'
type mockDoguInstallationUseCase_ApplyDoguStates_Call struct {
	*mock.Call
}

// ApplyDoguStates is a helper method to define mock.On call
//   - ctx context.Context
//   - blueprintId string
func (_e *mockDoguInstallationUseCase_Expecter) ApplyDoguStates(ctx interface{}, blueprintId interface{}) *mockDoguInstallationUseCase_ApplyDoguStates_Call {
	return &mockDoguInstallationUseCase_ApplyDoguStates_Call{Call: _e.mock.On("ApplyDoguStates", ctx, blueprintId)}
}

func (_c *mockDoguInstallationUseCase_ApplyDoguStates_Call) Run(run func(ctx context.Context, blueprintId string)) *mockDoguInstallationUseCase_ApplyDoguStates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockDoguInstallationUseCase_ApplyDoguStates_Call) Return(_a0 error) *mockDoguInstallationUseCase_ApplyDoguStates_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDoguInstallationUseCase_ApplyDoguStates_Call) RunAndReturn(run func(context.Context, string) error) *mockDoguInstallationUseCase_ApplyDoguStates_Call {
	_c.Call.Return(run)
	return _c
}

// CheckDoguHealthStates provides a mock function with given fields: ctx
func (_m *mockDoguInstallationUseCase) CheckDoguHealthStates(ctx context.Context) (ecosystem.DoguHealthResult, error) {
	ret := _m.Called(ctx)

	var r0 ecosystem.DoguHealthResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (ecosystem.DoguHealthResult, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) ecosystem.DoguHealthResult); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ecosystem.DoguHealthResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDoguInstallationUseCase_CheckDoguHealthStates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckDoguHealthStates'
type mockDoguInstallationUseCase_CheckDoguHealthStates_Call struct {
	*mock.Call
}

// CheckDoguHealthStates is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockDoguInstallationUseCase_Expecter) CheckDoguHealthStates(ctx interface{}) *mockDoguInstallationUseCase_CheckDoguHealthStates_Call {
	return &mockDoguInstallationUseCase_CheckDoguHealthStates_Call{Call: _e.mock.On("CheckDoguHealthStates", ctx)}
}

func (_c *mockDoguInstallationUseCase_CheckDoguHealthStates_Call) Run(run func(ctx context.Context)) *mockDoguInstallationUseCase_CheckDoguHealthStates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockDoguInstallationUseCase_CheckDoguHealthStates_Call) Return(_a0 ecosystem.DoguHealthResult, _a1 error) *mockDoguInstallationUseCase_CheckDoguHealthStates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDoguInstallationUseCase_CheckDoguHealthStates_Call) RunAndReturn(run func(context.Context) (ecosystem.DoguHealthResult, error)) *mockDoguInstallationUseCase_CheckDoguHealthStates_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForHealthyDogus provides a mock function with given fields: ctx
func (_m *mockDoguInstallationUseCase) WaitForHealthyDogus(ctx context.Context) (ecosystem.DoguHealthResult, error) {
	ret := _m.Called(ctx)

	var r0 ecosystem.DoguHealthResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (ecosystem.DoguHealthResult, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) ecosystem.DoguHealthResult); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ecosystem.DoguHealthResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDoguInstallationUseCase_WaitForHealthyDogus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForHealthyDogus'
type mockDoguInstallationUseCase_WaitForHealthyDogus_Call struct {
	*mock.Call
}

// WaitForHealthyDogus is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockDoguInstallationUseCase_Expecter) WaitForHealthyDogus(ctx interface{}) *mockDoguInstallationUseCase_WaitForHealthyDogus_Call {
	return &mockDoguInstallationUseCase_WaitForHealthyDogus_Call{Call: _e.mock.On("WaitForHealthyDogus", ctx)}
}

func (_c *mockDoguInstallationUseCase_WaitForHealthyDogus_Call) Run(run func(ctx context.Context)) *mockDoguInstallationUseCase_WaitForHealthyDogus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockDoguInstallationUseCase_WaitForHealthyDogus_Call) Return(_a0 ecosystem.DoguHealthResult, _a1 error) *mockDoguInstallationUseCase_WaitForHealthyDogus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDoguInstallationUseCase_WaitForHealthyDogus_Call) RunAndReturn(run func(context.Context) (ecosystem.DoguHealthResult, error)) *mockDoguInstallationUseCase_WaitForHealthyDogus_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockDoguInstallationUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// newMockDoguInstallationUseCase creates a new instance of mockDoguInstallationUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockDoguInstallationUseCase(t mockConstructorTestingTnewMockDoguInstallationUseCase) *mockDoguInstallationUseCase {
	mock := &mockDoguInstallationUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
