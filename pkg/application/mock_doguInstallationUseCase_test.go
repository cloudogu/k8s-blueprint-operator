// Code generated by mockery v2.20.0. DO NOT EDIT.

package application

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockDoguInstallationUseCase is an autogenerated mock type for the doguInstallationUseCase type
type mockDoguInstallationUseCase struct {
	mock.Mock
}

type mockDoguInstallationUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDoguInstallationUseCase) EXPECT() *mockDoguInstallationUseCase_Expecter {
	return &mockDoguInstallationUseCase_Expecter{mock: &_m.Mock}
}

// CheckDoguHealth provides a mock function with given fields: ctx, blueprintId
func (_m *mockDoguInstallationUseCase) CheckDoguHealth(ctx context.Context, blueprintId string) error {
	ret := _m.Called(ctx, blueprintId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, blueprintId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDoguInstallationUseCase_CheckDoguHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckDoguHealth'
type mockDoguInstallationUseCase_CheckDoguHealth_Call struct {
	*mock.Call
}

// CheckDoguHealth is a helper method to define mock.On call
//   - ctx context.Context
//   - blueprintId string
func (_e *mockDoguInstallationUseCase_Expecter) CheckDoguHealth(ctx interface{}, blueprintId interface{}) *mockDoguInstallationUseCase_CheckDoguHealth_Call {
	return &mockDoguInstallationUseCase_CheckDoguHealth_Call{Call: _e.mock.On("CheckDoguHealth", ctx, blueprintId)}
}

func (_c *mockDoguInstallationUseCase_CheckDoguHealth_Call) Run(run func(ctx context.Context, blueprintId string)) *mockDoguInstallationUseCase_CheckDoguHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockDoguInstallationUseCase_CheckDoguHealth_Call) Return(_a0 error) *mockDoguInstallationUseCase_CheckDoguHealth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDoguInstallationUseCase_CheckDoguHealth_Call) RunAndReturn(run func(context.Context, string) error) *mockDoguInstallationUseCase_CheckDoguHealth_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockDoguInstallationUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// newMockDoguInstallationUseCase creates a new instance of mockDoguInstallationUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockDoguInstallationUseCase(t mockConstructorTestingTnewMockDoguInstallationUseCase) *mockDoguInstallationUseCase {
	mock := &mockDoguInstallationUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
