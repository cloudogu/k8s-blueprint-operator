// Code generated by mockery v2.20.0. DO NOT EDIT.

package application

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockDoguConfigUseCase is an autogenerated mock type for the doguConfigUseCase type
type mockDoguConfigUseCase struct {
	mock.Mock
}

type mockDoguConfigUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDoguConfigUseCase) EXPECT() *mockDoguConfigUseCase_Expecter {
	return &mockDoguConfigUseCase_Expecter{mock: &_m.Mock}
}

// ApplyDoguConfig provides a mock function with given fields: ctx, blueprintId
func (_m *mockDoguConfigUseCase) ApplyDoguConfig(ctx context.Context, blueprintId string) error {
	ret := _m.Called(ctx, blueprintId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, blueprintId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDoguConfigUseCase_ApplyDoguConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyDoguConfig'
type mockDoguConfigUseCase_ApplyDoguConfig_Call struct {
	*mock.Call
}

// ApplyDoguConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - blueprintId string
func (_e *mockDoguConfigUseCase_Expecter) ApplyDoguConfig(ctx interface{}, blueprintId interface{}) *mockDoguConfigUseCase_ApplyDoguConfig_Call {
	return &mockDoguConfigUseCase_ApplyDoguConfig_Call{Call: _e.mock.On("ApplyDoguConfig", ctx, blueprintId)}
}

func (_c *mockDoguConfigUseCase_ApplyDoguConfig_Call) Run(run func(ctx context.Context, blueprintId string)) *mockDoguConfigUseCase_ApplyDoguConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockDoguConfigUseCase_ApplyDoguConfig_Call) Return(_a0 error) *mockDoguConfigUseCase_ApplyDoguConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDoguConfigUseCase_ApplyDoguConfig_Call) RunAndReturn(run func(context.Context, string) error) *mockDoguConfigUseCase_ApplyDoguConfig_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockDoguConfigUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// newMockDoguConfigUseCase creates a new instance of mockDoguConfigUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockDoguConfigUseCase(t mockConstructorTestingTnewMockDoguConfigUseCase) *mockDoguConfigUseCase {
	mock := &mockDoguConfigUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
