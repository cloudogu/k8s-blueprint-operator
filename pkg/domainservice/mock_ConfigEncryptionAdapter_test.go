// Code generated by mockery v2.20.0. DO NOT EDIT.

package domainservice

import (
	context "context"

	common "github.com/cloudogu/k8s-blueprint-operator/pkg/domain/common"

	ecosystem "github.com/cloudogu/k8s-blueprint-operator/pkg/domain/ecosystem"

	mock "github.com/stretchr/testify/mock"
)

// MockConfigEncryptionAdapter is an autogenerated mock type for the ConfigEncryptionAdapter type
type MockConfigEncryptionAdapter struct {
	mock.Mock
}

type MockConfigEncryptionAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigEncryptionAdapter) EXPECT() *MockConfigEncryptionAdapter_Expecter {
	return &MockConfigEncryptionAdapter_Expecter{mock: &_m.Mock}
}

// Encrypt provides a mock function with given fields: ctx, doguName, configValue
func (_m *MockConfigEncryptionAdapter) Encrypt(ctx context.Context, doguName common.SimpleDoguName, configValue ecosystem.DoguConfigValue) (ecosystem.DoguConfigValue, error) {
	ret := _m.Called(ctx, doguName, configValue)

	var r0 ecosystem.DoguConfigValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.SimpleDoguName, ecosystem.DoguConfigValue) (ecosystem.DoguConfigValue, error)); ok {
		return rf(ctx, doguName, configValue)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.SimpleDoguName, ecosystem.DoguConfigValue) ecosystem.DoguConfigValue); ok {
		r0 = rf(ctx, doguName, configValue)
	} else {
		r0 = ret.Get(0).(ecosystem.DoguConfigValue)
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.SimpleDoguName, ecosystem.DoguConfigValue) error); ok {
		r1 = rf(ctx, doguName, configValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigEncryptionAdapter_Encrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encrypt'
type MockConfigEncryptionAdapter_Encrypt_Call struct {
	*mock.Call
}

// Encrypt is a helper method to define mock.On call
//   - ctx context.Context
//   - doguName common.SimpleDoguName
//   - configValue ecosystem.DoguConfigValue
func (_e *MockConfigEncryptionAdapter_Expecter) Encrypt(ctx interface{}, doguName interface{}, configValue interface{}) *MockConfigEncryptionAdapter_Encrypt_Call {
	return &MockConfigEncryptionAdapter_Encrypt_Call{Call: _e.mock.On("Encrypt", ctx, doguName, configValue)}
}

func (_c *MockConfigEncryptionAdapter_Encrypt_Call) Run(run func(ctx context.Context, doguName common.SimpleDoguName, configValue ecosystem.DoguConfigValue)) *MockConfigEncryptionAdapter_Encrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.SimpleDoguName), args[2].(ecosystem.DoguConfigValue))
	})
	return _c
}

func (_c *MockConfigEncryptionAdapter_Encrypt_Call) Return(_a0 ecosystem.DoguConfigValue, _a1 error) *MockConfigEncryptionAdapter_Encrypt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigEncryptionAdapter_Encrypt_Call) RunAndReturn(run func(context.Context, common.SimpleDoguName, ecosystem.DoguConfigValue) (ecosystem.DoguConfigValue, error)) *MockConfigEncryptionAdapter_Encrypt_Call {
	_c.Call.Return(run)
	return _c
}

// EncryptAll provides a mock function with given fields: ctx, doguName, configValues
func (_m *MockConfigEncryptionAdapter) EncryptAll(ctx context.Context, doguName common.SimpleDoguName, configValues []ecosystem.DoguConfigValue) (map[common.SimpleDoguName]ecosystem.DoguConfigValue, error) {
	ret := _m.Called(ctx, doguName, configValues)

	var r0 map[common.SimpleDoguName]ecosystem.DoguConfigValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.SimpleDoguName, []ecosystem.DoguConfigValue) (map[common.SimpleDoguName]ecosystem.DoguConfigValue, error)); ok {
		return rf(ctx, doguName, configValues)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.SimpleDoguName, []ecosystem.DoguConfigValue) map[common.SimpleDoguName]ecosystem.DoguConfigValue); ok {
		r0 = rf(ctx, doguName, configValues)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[common.SimpleDoguName]ecosystem.DoguConfigValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.SimpleDoguName, []ecosystem.DoguConfigValue) error); ok {
		r1 = rf(ctx, doguName, configValues)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigEncryptionAdapter_EncryptAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncryptAll'
type MockConfigEncryptionAdapter_EncryptAll_Call struct {
	*mock.Call
}

// EncryptAll is a helper method to define mock.On call
//   - ctx context.Context
//   - doguName common.SimpleDoguName
//   - configValues []ecosystem.DoguConfigValue
func (_e *MockConfigEncryptionAdapter_Expecter) EncryptAll(ctx interface{}, doguName interface{}, configValues interface{}) *MockConfigEncryptionAdapter_EncryptAll_Call {
	return &MockConfigEncryptionAdapter_EncryptAll_Call{Call: _e.mock.On("EncryptAll", ctx, doguName, configValues)}
}

func (_c *MockConfigEncryptionAdapter_EncryptAll_Call) Run(run func(ctx context.Context, doguName common.SimpleDoguName, configValues []ecosystem.DoguConfigValue)) *MockConfigEncryptionAdapter_EncryptAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.SimpleDoguName), args[2].([]ecosystem.DoguConfigValue))
	})
	return _c
}

func (_c *MockConfigEncryptionAdapter_EncryptAll_Call) Return(_a0 map[common.SimpleDoguName]ecosystem.DoguConfigValue, _a1 error) *MockConfigEncryptionAdapter_EncryptAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigEncryptionAdapter_EncryptAll_Call) RunAndReturn(run func(context.Context, common.SimpleDoguName, []ecosystem.DoguConfigValue) (map[common.SimpleDoguName]ecosystem.DoguConfigValue, error)) *MockConfigEncryptionAdapter_EncryptAll_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockConfigEncryptionAdapter interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockConfigEncryptionAdapter creates a new instance of MockConfigEncryptionAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockConfigEncryptionAdapter(t mockConstructorTestingTNewMockConfigEncryptionAdapter) *MockConfigEncryptionAdapter {
	mock := &MockConfigEncryptionAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
