// Code generated by mockery v2.20.0. DO NOT EDIT.

package domainservice

import (
	context "context"

	common "github.com/cloudogu/k8s-blueprint-operator/pkg/domain/common"

	ecosystem "github.com/cloudogu/k8s-blueprint-operator/pkg/domain/ecosystem"

	mock "github.com/stretchr/testify/mock"
)

// MockGlobalConfigEntryRepository is an autogenerated mock type for the GlobalConfigEntryRepository type
type MockGlobalConfigEntryRepository struct {
	mock.Mock
}

type MockGlobalConfigEntryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGlobalConfigEntryRepository) EXPECT() *MockGlobalConfigEntryRepository_Expecter {
	return &MockGlobalConfigEntryRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *MockGlobalConfigEntryRepository) Delete(_a0 context.Context, _a1 common.GlobalConfigKey) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.GlobalConfigKey) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGlobalConfigEntryRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockGlobalConfigEntryRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 common.GlobalConfigKey
func (_e *MockGlobalConfigEntryRepository_Expecter) Delete(_a0 interface{}, _a1 interface{}) *MockGlobalConfigEntryRepository_Delete_Call {
	return &MockGlobalConfigEntryRepository_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *MockGlobalConfigEntryRepository_Delete_Call) Run(run func(_a0 context.Context, _a1 common.GlobalConfigKey)) *MockGlobalConfigEntryRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.GlobalConfigKey))
	})
	return _c
}

func (_c *MockGlobalConfigEntryRepository_Delete_Call) Return(_a0 error) *MockGlobalConfigEntryRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGlobalConfigEntryRepository_Delete_Call) RunAndReturn(run func(context.Context, common.GlobalConfigKey) error) *MockGlobalConfigEntryRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MockGlobalConfigEntryRepository) Get(_a0 context.Context, _a1 common.GlobalConfigKey) (*ecosystem.GlobalConfigEntry, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *ecosystem.GlobalConfigEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.GlobalConfigKey) (*ecosystem.GlobalConfigEntry, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.GlobalConfigKey) *ecosystem.GlobalConfigEntry); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecosystem.GlobalConfigEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.GlobalConfigKey) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGlobalConfigEntryRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockGlobalConfigEntryRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 common.GlobalConfigKey
func (_e *MockGlobalConfigEntryRepository_Expecter) Get(_a0 interface{}, _a1 interface{}) *MockGlobalConfigEntryRepository_Get_Call {
	return &MockGlobalConfigEntryRepository_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *MockGlobalConfigEntryRepository_Get_Call) Run(run func(_a0 context.Context, _a1 common.GlobalConfigKey)) *MockGlobalConfigEntryRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.GlobalConfigKey))
	})
	return _c
}

func (_c *MockGlobalConfigEntryRepository_Get_Call) Return(_a0 *ecosystem.GlobalConfigEntry, _a1 error) *MockGlobalConfigEntryRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGlobalConfigEntryRepository_Get_Call) RunAndReturn(run func(context.Context, common.GlobalConfigKey) (*ecosystem.GlobalConfigEntry, error)) *MockGlobalConfigEntryRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllByKey provides a mock function with given fields: _a0, _a1
func (_m *MockGlobalConfigEntryRepository) GetAllByKey(_a0 context.Context, _a1 []common.GlobalConfigKey) (map[common.GlobalConfigKey]*ecosystem.GlobalConfigEntry, error) {
	ret := _m.Called(_a0, _a1)

	var r0 map[common.GlobalConfigKey]*ecosystem.GlobalConfigEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []common.GlobalConfigKey) (map[common.GlobalConfigKey]*ecosystem.GlobalConfigEntry, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []common.GlobalConfigKey) map[common.GlobalConfigKey]*ecosystem.GlobalConfigEntry); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[common.GlobalConfigKey]*ecosystem.GlobalConfigEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []common.GlobalConfigKey) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGlobalConfigEntryRepository_GetAllByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllByKey'
type MockGlobalConfigEntryRepository_GetAllByKey_Call struct {
	*mock.Call
}

// GetAllByKey is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []common.GlobalConfigKey
func (_e *MockGlobalConfigEntryRepository_Expecter) GetAllByKey(_a0 interface{}, _a1 interface{}) *MockGlobalConfigEntryRepository_GetAllByKey_Call {
	return &MockGlobalConfigEntryRepository_GetAllByKey_Call{Call: _e.mock.On("GetAllByKey", _a0, _a1)}
}

func (_c *MockGlobalConfigEntryRepository_GetAllByKey_Call) Run(run func(_a0 context.Context, _a1 []common.GlobalConfigKey)) *MockGlobalConfigEntryRepository_GetAllByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]common.GlobalConfigKey))
	})
	return _c
}

func (_c *MockGlobalConfigEntryRepository_GetAllByKey_Call) Return(_a0 map[common.GlobalConfigKey]*ecosystem.GlobalConfigEntry, _a1 error) *MockGlobalConfigEntryRepository_GetAllByKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGlobalConfigEntryRepository_GetAllByKey_Call) RunAndReturn(run func(context.Context, []common.GlobalConfigKey) (map[common.GlobalConfigKey]*ecosystem.GlobalConfigEntry, error)) *MockGlobalConfigEntryRepository_GetAllByKey_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: _a0, _a1
func (_m *MockGlobalConfigEntryRepository) Save(_a0 context.Context, _a1 *ecosystem.GlobalConfigEntry) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecosystem.GlobalConfigEntry) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGlobalConfigEntryRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockGlobalConfigEntryRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *ecosystem.GlobalConfigEntry
func (_e *MockGlobalConfigEntryRepository_Expecter) Save(_a0 interface{}, _a1 interface{}) *MockGlobalConfigEntryRepository_Save_Call {
	return &MockGlobalConfigEntryRepository_Save_Call{Call: _e.mock.On("Save", _a0, _a1)}
}

func (_c *MockGlobalConfigEntryRepository_Save_Call) Run(run func(_a0 context.Context, _a1 *ecosystem.GlobalConfigEntry)) *MockGlobalConfigEntryRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ecosystem.GlobalConfigEntry))
	})
	return _c
}

func (_c *MockGlobalConfigEntryRepository_Save_Call) Return(_a0 error) *MockGlobalConfigEntryRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGlobalConfigEntryRepository_Save_Call) RunAndReturn(run func(context.Context, *ecosystem.GlobalConfigEntry) error) *MockGlobalConfigEntryRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveAll provides a mock function with given fields: _a0, _a1
func (_m *MockGlobalConfigEntryRepository) SaveAll(_a0 context.Context, _a1 []*ecosystem.GlobalConfigEntry) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*ecosystem.GlobalConfigEntry) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGlobalConfigEntryRepository_SaveAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveAll'
type MockGlobalConfigEntryRepository_SaveAll_Call struct {
	*mock.Call
}

// SaveAll is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []*ecosystem.GlobalConfigEntry
func (_e *MockGlobalConfigEntryRepository_Expecter) SaveAll(_a0 interface{}, _a1 interface{}) *MockGlobalConfigEntryRepository_SaveAll_Call {
	return &MockGlobalConfigEntryRepository_SaveAll_Call{Call: _e.mock.On("SaveAll", _a0, _a1)}
}

func (_c *MockGlobalConfigEntryRepository_SaveAll_Call) Run(run func(_a0 context.Context, _a1 []*ecosystem.GlobalConfigEntry)) *MockGlobalConfigEntryRepository_SaveAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*ecosystem.GlobalConfigEntry))
	})
	return _c
}

func (_c *MockGlobalConfigEntryRepository_SaveAll_Call) Return(_a0 error) *MockGlobalConfigEntryRepository_SaveAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGlobalConfigEntryRepository_SaveAll_Call) RunAndReturn(run func(context.Context, []*ecosystem.GlobalConfigEntry) error) *MockGlobalConfigEntryRepository_SaveAll_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockGlobalConfigEntryRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockGlobalConfigEntryRepository creates a new instance of MockGlobalConfigEntryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockGlobalConfigEntryRepository(t mockConstructorTestingTNewMockGlobalConfigEntryRepository) *MockGlobalConfigEntryRepository {
	mock := &MockGlobalConfigEntryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
