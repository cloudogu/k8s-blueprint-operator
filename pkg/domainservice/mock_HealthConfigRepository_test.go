// Code generated by mockery v2.20.0. DO NOT EDIT.

package domainservice

import (
	context "context"

	domain "github.com/cloudogu/k8s-blueprint-operator/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockHealthConfigRepository is an autogenerated mock type for the HealthConfigRepository type
type MockHealthConfigRepository struct {
	mock.Mock
}

type MockHealthConfigRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHealthConfigRepository) EXPECT() *MockHealthConfigRepository_Expecter {
	return &MockHealthConfigRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx
func (_m *MockHealthConfigRepository) Get(ctx context.Context) (domain.HealthConfig, error) {
	ret := _m.Called(ctx)

	var r0 domain.HealthConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (domain.HealthConfig, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) domain.HealthConfig); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(domain.HealthConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHealthConfigRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockHealthConfigRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockHealthConfigRepository_Expecter) Get(ctx interface{}) *MockHealthConfigRepository_Get_Call {
	return &MockHealthConfigRepository_Get_Call{Call: _e.mock.On("Get", ctx)}
}

func (_c *MockHealthConfigRepository_Get_Call) Run(run func(ctx context.Context)) *MockHealthConfigRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockHealthConfigRepository_Get_Call) Return(_a0 domain.HealthConfig, _a1 error) *MockHealthConfigRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHealthConfigRepository_Get_Call) RunAndReturn(run func(context.Context) (domain.HealthConfig, error)) *MockHealthConfigRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockHealthConfigRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockHealthConfigRepository creates a new instance of MockHealthConfigRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockHealthConfigRepository(t mockConstructorTestingTNewMockHealthConfigRepository) *MockHealthConfigRepository {
	mock := &MockHealthConfigRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
