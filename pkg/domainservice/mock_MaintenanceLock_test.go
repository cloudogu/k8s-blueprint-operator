// Code generated by mockery v2.20.0. DO NOT EDIT.

package domainservice

import mock "github.com/stretchr/testify/mock"

// MockMaintenanceLock is an autogenerated mock type for the MaintenanceLock type
type MockMaintenanceLock struct {
	mock.Mock
}

type MockMaintenanceLock_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMaintenanceLock) EXPECT() *MockMaintenanceLock_Expecter {
	return &MockMaintenanceLock_Expecter{mock: &_m.Mock}
}

// IsActive provides a mock function with given fields:
func (_m *MockMaintenanceLock) IsActive() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockMaintenanceLock_IsActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsActive'
type MockMaintenanceLock_IsActive_Call struct {
	*mock.Call
}

// IsActive is a helper method to define mock.On call
func (_e *MockMaintenanceLock_Expecter) IsActive() *MockMaintenanceLock_IsActive_Call {
	return &MockMaintenanceLock_IsActive_Call{Call: _e.mock.On("IsActive")}
}

func (_c *MockMaintenanceLock_IsActive_Call) Run(run func()) *MockMaintenanceLock_IsActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMaintenanceLock_IsActive_Call) Return(_a0 bool) *MockMaintenanceLock_IsActive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMaintenanceLock_IsActive_Call) RunAndReturn(run func() bool) *MockMaintenanceLock_IsActive_Call {
	_c.Call.Return(run)
	return _c
}

// IsOurs provides a mock function with given fields:
func (_m *MockMaintenanceLock) IsOurs() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockMaintenanceLock_IsOurs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsOurs'
type MockMaintenanceLock_IsOurs_Call struct {
	*mock.Call
}

// IsOurs is a helper method to define mock.On call
func (_e *MockMaintenanceLock_Expecter) IsOurs() *MockMaintenanceLock_IsOurs_Call {
	return &MockMaintenanceLock_IsOurs_Call{Call: _e.mock.On("IsOurs")}
}

func (_c *MockMaintenanceLock_IsOurs_Call) Run(run func()) *MockMaintenanceLock_IsOurs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMaintenanceLock_IsOurs_Call) Return(_a0 bool) *MockMaintenanceLock_IsOurs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMaintenanceLock_IsOurs_Call) RunAndReturn(run func() bool) *MockMaintenanceLock_IsOurs_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockMaintenanceLock interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMaintenanceLock creates a new instance of MockMaintenanceLock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMaintenanceLock(t mockConstructorTestingTNewMockMaintenanceLock) *MockMaintenanceLock {
	mock := &MockMaintenanceLock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
