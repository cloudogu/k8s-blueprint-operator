// Code generated by mockery v2.20.0. DO NOT EDIT.

package domainservice

import (
	context "context"

	common "github.com/cloudogu/k8s-blueprint-operator/pkg/domain/common"

	ecosystem "github.com/cloudogu/k8s-blueprint-operator/pkg/domain/ecosystem"

	mock "github.com/stretchr/testify/mock"
)

// MockDoguConfigKeyRepository is an autogenerated mock type for the DoguConfigKeyRepository type
type MockDoguConfigKeyRepository struct {
	mock.Mock
}

type MockDoguConfigKeyRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDoguConfigKeyRepository) EXPECT() *MockDoguConfigKeyRepository_Expecter {
	return &MockDoguConfigKeyRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, key
func (_m *MockDoguConfigKeyRepository) Delete(ctx context.Context, key ecosystem.DoguConfigKey) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ecosystem.DoguConfigKey) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDoguConfigKeyRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDoguConfigKeyRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - key ecosystem.DoguConfigKey
func (_e *MockDoguConfigKeyRepository_Expecter) Delete(ctx interface{}, key interface{}) *MockDoguConfigKeyRepository_Delete_Call {
	return &MockDoguConfigKeyRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *MockDoguConfigKeyRepository_Delete_Call) Run(run func(ctx context.Context, key ecosystem.DoguConfigKey)) *MockDoguConfigKeyRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ecosystem.DoguConfigKey))
	})
	return _c
}

func (_c *MockDoguConfigKeyRepository_Delete_Call) Return(_a0 error) *MockDoguConfigKeyRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDoguConfigKeyRepository_Delete_Call) RunAndReturn(run func(context.Context, ecosystem.DoguConfigKey) error) *MockDoguConfigKeyRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllByKey provides a mock function with given fields: ctx, keys
func (_m *MockDoguConfigKeyRepository) GetAllByKey(ctx context.Context, keys []ecosystem.DoguConfigKey) (map[common.SimpleDoguName][]*ecosystem.DoguConfigEntry, error) {
	ret := _m.Called(ctx, keys)

	var r0 map[common.SimpleDoguName][]*ecosystem.DoguConfigEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []ecosystem.DoguConfigKey) (map[common.SimpleDoguName][]*ecosystem.DoguConfigEntry, error)); ok {
		return rf(ctx, keys)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []ecosystem.DoguConfigKey) map[common.SimpleDoguName][]*ecosystem.DoguConfigEntry); ok {
		r0 = rf(ctx, keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[common.SimpleDoguName][]*ecosystem.DoguConfigEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []ecosystem.DoguConfigKey) error); ok {
		r1 = rf(ctx, keys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDoguConfigKeyRepository_GetAllByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllByKey'
type MockDoguConfigKeyRepository_GetAllByKey_Call struct {
	*mock.Call
}

// GetAllByKey is a helper method to define mock.On call
//   - ctx context.Context
//   - keys []ecosystem.DoguConfigKey
func (_e *MockDoguConfigKeyRepository_Expecter) GetAllByKey(ctx interface{}, keys interface{}) *MockDoguConfigKeyRepository_GetAllByKey_Call {
	return &MockDoguConfigKeyRepository_GetAllByKey_Call{Call: _e.mock.On("GetAllByKey", ctx, keys)}
}

func (_c *MockDoguConfigKeyRepository_GetAllByKey_Call) Run(run func(ctx context.Context, keys []ecosystem.DoguConfigKey)) *MockDoguConfigKeyRepository_GetAllByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]ecosystem.DoguConfigKey))
	})
	return _c
}

func (_c *MockDoguConfigKeyRepository_GetAllByKey_Call) Return(_a0 map[common.SimpleDoguName][]*ecosystem.DoguConfigEntry, _a1 error) *MockDoguConfigKeyRepository_GetAllByKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDoguConfigKeyRepository_GetAllByKey_Call) RunAndReturn(run func(context.Context, []ecosystem.DoguConfigKey) (map[common.SimpleDoguName][]*ecosystem.DoguConfigEntry, error)) *MockDoguConfigKeyRepository_GetAllByKey_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: _a0, _a1
func (_m *MockDoguConfigKeyRepository) Save(_a0 context.Context, _a1 *ecosystem.DoguConfigEntry) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecosystem.DoguConfigEntry) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDoguConfigKeyRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockDoguConfigKeyRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *ecosystem.DoguConfigEntry
func (_e *MockDoguConfigKeyRepository_Expecter) Save(_a0 interface{}, _a1 interface{}) *MockDoguConfigKeyRepository_Save_Call {
	return &MockDoguConfigKeyRepository_Save_Call{Call: _e.mock.On("Save", _a0, _a1)}
}

func (_c *MockDoguConfigKeyRepository_Save_Call) Run(run func(_a0 context.Context, _a1 *ecosystem.DoguConfigEntry)) *MockDoguConfigKeyRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ecosystem.DoguConfigEntry))
	})
	return _c
}

func (_c *MockDoguConfigKeyRepository_Save_Call) Return(_a0 error) *MockDoguConfigKeyRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDoguConfigKeyRepository_Save_Call) RunAndReturn(run func(context.Context, *ecosystem.DoguConfigEntry) error) *MockDoguConfigKeyRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveAll provides a mock function with given fields: ctx, keys
func (_m *MockDoguConfigKeyRepository) SaveAll(ctx context.Context, keys []*ecosystem.DoguConfigEntry) error {
	ret := _m.Called(ctx, keys)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*ecosystem.DoguConfigEntry) error); ok {
		r0 = rf(ctx, keys)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDoguConfigKeyRepository_SaveAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveAll'
type MockDoguConfigKeyRepository_SaveAll_Call struct {
	*mock.Call
}

// SaveAll is a helper method to define mock.On call
//   - ctx context.Context
//   - keys []*ecosystem.DoguConfigEntry
func (_e *MockDoguConfigKeyRepository_Expecter) SaveAll(ctx interface{}, keys interface{}) *MockDoguConfigKeyRepository_SaveAll_Call {
	return &MockDoguConfigKeyRepository_SaveAll_Call{Call: _e.mock.On("SaveAll", ctx, keys)}
}

func (_c *MockDoguConfigKeyRepository_SaveAll_Call) Run(run func(ctx context.Context, keys []*ecosystem.DoguConfigEntry)) *MockDoguConfigKeyRepository_SaveAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*ecosystem.DoguConfigEntry))
	})
	return _c
}

func (_c *MockDoguConfigKeyRepository_SaveAll_Call) Return(_a0 error) *MockDoguConfigKeyRepository_SaveAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDoguConfigKeyRepository_SaveAll_Call) RunAndReturn(run func(context.Context, []*ecosystem.DoguConfigEntry) error) *MockDoguConfigKeyRepository_SaveAll_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockDoguConfigKeyRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDoguConfigKeyRepository creates a new instance of MockDoguConfigKeyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDoguConfigKeyRepository(t mockConstructorTestingTNewMockDoguConfigKeyRepository) *MockDoguConfigKeyRepository {
	mock := &MockDoguConfigKeyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
