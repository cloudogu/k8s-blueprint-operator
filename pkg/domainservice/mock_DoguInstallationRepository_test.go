// Code generated by mockery v2.20.0. DO NOT EDIT.

package domainservice

import (
	context "context"

	ecosystem "github.com/cloudogu/k8s-blueprint-operator/pkg/domain/ecosystem"
	mock "github.com/stretchr/testify/mock"
)

// MockDoguInstallationRepository is an autogenerated mock type for the DoguInstallationRepository type
type MockDoguInstallationRepository struct {
	mock.Mock
}

type MockDoguInstallationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDoguInstallationRepository) EXPECT() *MockDoguInstallationRepository_Expecter {
	return &MockDoguInstallationRepository_Expecter{mock: &_m.Mock}
}

// GetAllByName provides a mock function with given fields: ctx, doguNames
func (_m *MockDoguInstallationRepository) GetAllByName(ctx context.Context, doguNames []string) ([]ecosystem.DoguInstallation, error) {
	ret := _m.Called(ctx, doguNames)

	var r0 []ecosystem.DoguInstallation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]ecosystem.DoguInstallation, error)); ok {
		return rf(ctx, doguNames)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []ecosystem.DoguInstallation); ok {
		r0 = rf(ctx, doguNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ecosystem.DoguInstallation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, doguNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDoguInstallationRepository_GetAllByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllByName'
type MockDoguInstallationRepository_GetAllByName_Call struct {
	*mock.Call
}

// GetAllByName is a helper method to define mock.On call
//   - ctx context.Context
//   - doguNames []string
func (_e *MockDoguInstallationRepository_Expecter) GetAllByName(ctx interface{}, doguNames interface{}) *MockDoguInstallationRepository_GetAllByName_Call {
	return &MockDoguInstallationRepository_GetAllByName_Call{Call: _e.mock.On("GetAllByName", ctx, doguNames)}
}

func (_c *MockDoguInstallationRepository_GetAllByName_Call) Run(run func(ctx context.Context, doguNames []string)) *MockDoguInstallationRepository_GetAllByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockDoguInstallationRepository_GetAllByName_Call) Return(_a0 []ecosystem.DoguInstallation, _a1 error) *MockDoguInstallationRepository_GetAllByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDoguInstallationRepository_GetAllByName_Call) RunAndReturn(run func(context.Context, []string) ([]ecosystem.DoguInstallation, error)) *MockDoguInstallationRepository_GetAllByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, doguName
func (_m *MockDoguInstallationRepository) GetByName(ctx context.Context, doguName string) (ecosystem.DoguInstallation, error) {
	ret := _m.Called(ctx, doguName)

	var r0 ecosystem.DoguInstallation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (ecosystem.DoguInstallation, error)); ok {
		return rf(ctx, doguName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) ecosystem.DoguInstallation); ok {
		r0 = rf(ctx, doguName)
	} else {
		r0 = ret.Get(0).(ecosystem.DoguInstallation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, doguName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDoguInstallationRepository_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockDoguInstallationRepository_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - doguName string
func (_e *MockDoguInstallationRepository_Expecter) GetByName(ctx interface{}, doguName interface{}) *MockDoguInstallationRepository_GetByName_Call {
	return &MockDoguInstallationRepository_GetByName_Call{Call: _e.mock.On("GetByName", ctx, doguName)}
}

func (_c *MockDoguInstallationRepository_GetByName_Call) Run(run func(ctx context.Context, doguName string)) *MockDoguInstallationRepository_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDoguInstallationRepository_GetByName_Call) Return(_a0 ecosystem.DoguInstallation, _a1 error) *MockDoguInstallationRepository_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDoguInstallationRepository_GetByName_Call) RunAndReturn(run func(context.Context, string) (ecosystem.DoguInstallation, error)) *MockDoguInstallationRepository_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockDoguInstallationRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDoguInstallationRepository creates a new instance of MockDoguInstallationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDoguInstallationRepository(t mockConstructorTestingTNewMockDoguInstallationRepository) *MockDoguInstallationRepository {
	mock := &MockDoguInstallationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
