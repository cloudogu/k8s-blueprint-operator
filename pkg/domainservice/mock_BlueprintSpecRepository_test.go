// Code generated by mockery v2.20.0. DO NOT EDIT.

package domainservice

import (
	context "context"

	domain "github.com/cloudogu/k8s-blueprint-operator/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockBlueprintSpecRepository is an autogenerated mock type for the BlueprintSpecRepository type
type MockBlueprintSpecRepository struct {
	mock.Mock
}

type MockBlueprintSpecRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlueprintSpecRepository) EXPECT() *MockBlueprintSpecRepository_Expecter {
	return &MockBlueprintSpecRepository_Expecter{mock: &_m.Mock}
}

// GetById provides a mock function with given fields: ctx, blueprintId
func (_m *MockBlueprintSpecRepository) GetById(ctx context.Context, blueprintId string) (domain.BlueprintSpec, error) {
	ret := _m.Called(ctx, blueprintId)

	var r0 domain.BlueprintSpec
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.BlueprintSpec, error)); ok {
		return rf(ctx, blueprintId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.BlueprintSpec); ok {
		r0 = rf(ctx, blueprintId)
	} else {
		r0 = ret.Get(0).(domain.BlueprintSpec)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, blueprintId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlueprintSpecRepository_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type MockBlueprintSpecRepository_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - ctx context.Context
//   - blueprintId string
func (_e *MockBlueprintSpecRepository_Expecter) GetById(ctx interface{}, blueprintId interface{}) *MockBlueprintSpecRepository_GetById_Call {
	return &MockBlueprintSpecRepository_GetById_Call{Call: _e.mock.On("GetById", ctx, blueprintId)}
}

func (_c *MockBlueprintSpecRepository_GetById_Call) Run(run func(ctx context.Context, blueprintId string)) *MockBlueprintSpecRepository_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBlueprintSpecRepository_GetById_Call) Return(_a0 domain.BlueprintSpec, _a1 error) *MockBlueprintSpecRepository_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlueprintSpecRepository_GetById_Call) RunAndReturn(run func(context.Context, string) (domain.BlueprintSpec, error)) *MockBlueprintSpecRepository_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, blueprintSpec
func (_m *MockBlueprintSpecRepository) Update(ctx context.Context, blueprintSpec domain.BlueprintSpec) error {
	ret := _m.Called(ctx, blueprintSpec)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.BlueprintSpec) error); ok {
		r0 = rf(ctx, blueprintSpec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlueprintSpecRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockBlueprintSpecRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - blueprintSpec domain.BlueprintSpec
func (_e *MockBlueprintSpecRepository_Expecter) Update(ctx interface{}, blueprintSpec interface{}) *MockBlueprintSpecRepository_Update_Call {
	return &MockBlueprintSpecRepository_Update_Call{Call: _e.mock.On("Update", ctx, blueprintSpec)}
}

func (_c *MockBlueprintSpecRepository_Update_Call) Run(run func(ctx context.Context, blueprintSpec domain.BlueprintSpec)) *MockBlueprintSpecRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.BlueprintSpec))
	})
	return _c
}

func (_c *MockBlueprintSpecRepository_Update_Call) Return(_a0 error) *MockBlueprintSpecRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlueprintSpecRepository_Update_Call) RunAndReturn(run func(context.Context, domain.BlueprintSpec) error) *MockBlueprintSpecRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockBlueprintSpecRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockBlueprintSpecRepository creates a new instance of MockBlueprintSpecRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockBlueprintSpecRepository(t mockConstructorTestingTNewMockBlueprintSpecRepository) *MockBlueprintSpecRepository {
	mock := &MockBlueprintSpecRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
